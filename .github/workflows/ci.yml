name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.5.0 --activate

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '10.5.0'
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Cypress
        run: |
          npx cypress install
          npx cypress verify
          npx cypress info

      - name: Show TypeScript version
        run: pnpm tsc --version

      - name: Type check
        run: pnpm tsc --noEmit

      - name: Run ESLint
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test
        env:
          CI: true
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/biottic-test

      - name: Build
        run: pnpm run build
        env:
          VITE_API_URL: 'http://localhost:3000/api'
          NODE_ENV: 'production'

      - name: Start servers
        run: |
          # Iniciar los servidores en background
          pnpm run dev & 
          echo $! > vite.pid
          pnpm run server &
          echo $! > server.pid

          echo "Waiting for servers to start..."
          
          # Esperar por el servidor Vite (Frontend)
          MAX_RETRIES=30
          COUNT=0
          until curl -s http://localhost:5173 > /dev/null || [ $COUNT -eq $MAX_RETRIES ]; do
            echo "Waiting for Vite server... ($(( COUNT + 1 ))/$MAX_RETRIES)"
            sleep 2
            COUNT=$((COUNT + 1))
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "Vite server failed to start"
            exit 1
          fi

          # Esperar por el servidor API
          COUNT=0
          until curl -s http://localhost:3000/api/health > /dev/null || [ $COUNT -eq $MAX_RETRIES ]; do
            echo "Waiting for API server... ($(( COUNT + 1 ))/$MAX_RETRIES)"
            sleep 2
            COUNT=$((COUNT + 1))
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "API server failed to start"
            exit 1
          fi

          echo "Both servers are up and running!"
        env:
          MONGODB_URI: mongodb://localhost:27017/biottic-test
          NODE_ENV: test
          PORT: 3000
          VITE_PORT: 5173

      - name: Run Cypress
        run: pnpm exec cypress run --config-file cypress.ci.config.ts
        env:
          CYPRESS_BASE_URL: http://localhost:5174
          CYPRESS_API_URL: http://localhost:3000/api
          NODE_ENV: test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: coverage/
          retention-days: 30

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          path: |
            cypress/videos/
            cypress/screenshots/
          retention-days: 7

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  security:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.5.0 --activate

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '10.5.0'
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run SAST
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: Run Dependency Check
        run: |
          echo "Running security audit..."
          pnpm audit --audit-level high || (
            echo "Security audit failed. Generating detailed report..."
            pnpm audit
            if [ "$(pnpm audit --json | jq '.vulnerabilities | map(select(.severity == "critical" or .severity == "high")) | length')" -gt 0 ]; then
              echo "Critical or high severity vulnerabilities found. Failing the build."
              exit 1
            else
              echo "Only moderate or low severity vulnerabilities found. Continuing with warnings."
              exit 0
            fi
          )

  notify:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check build status
        if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' }}
        run: exit 1
